<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/HurryUpWb/hurryupwb.github.io</id>
    <title>WB</title>
    <updated>2020-03-24T14:19:29.808Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/HurryUpWb/hurryupwb.github.io"/>
    <link rel="self" href="https://github.com/HurryUpWb/hurryupwb.github.io/atom.xml"/>
    <logo>https://github.com/HurryUpWb/hurryupwb.github.io/images/avatar.png</logo>
    <icon>https://github.com/HurryUpWb/hurryupwb.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WB</rights>
    <entry>
        <title type="html"><![CDATA[about]]></title>
        <id>https://github.com/HurryUpWb/hurryupwb.github.io/post/about/</id>
        <link href="https://github.com/HurryUpWb/hurryupwb.github.io/post/about/">
        </link>
        <updated>2020-03-24T14:18:53.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>人</li>
<li>搬砖</li>
<li>JAVA</li>
<li>地球</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[配置中心选型及使用]]></title>
        <id>https://github.com/HurryUpWb/hurryupwb.github.io/post/pei-zhi-zhong-xin-xuan-xing-ji-shi-yong/</id>
        <link href="https://github.com/HurryUpWb/hurryupwb.github.io/post/pei-zhi-zhong-xin-xuan-xing-ji-shi-yong/">
        </link>
        <updated>2020-03-24T13:39:59.000Z</updated>
        <content type="html"><![CDATA[<h4 id="配置中心">配置中心</h4>
<h5 id="为什么要有配置中心">为什么要有配置中心</h5>
<p>​		随着程序功能的日益复杂，程序的配置日益增多：各种功能的开关、参数的配置、服务器的地址等，对程序配置的期望值也越来越高：配置修改后实时生效，灰度发布，分环境、分集群管理配置，完善的权限、审核机制，在这样的大环境下，传统的通过配置文件、数据库等方式已经越来越无法满足开发人员对配置管理的需求，所以在分布式的架构中配置中心也被当作一个独立的模块从业务项目中抽离出来。</p>
<h5 id="流行配置中心选型对比">流行配置中心选型对比</h5>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Config</th>
<th style="text-align:center">Apollo</th>
<th style="text-align:center">Nacos</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">权限管控</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:center">灰度发布</td>
<td style="text-align:center"></td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:center">版本管理</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">格式校验</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">实时推送</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">多集群环境</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">图形化界面</td>
<td style="text-align:center">无</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td style="text-align:center">业务侵入</td>
<td style="text-align:center">小</td>
<td style="text-align:center">大</td>
<td style="text-align:center">大</td>
</tr>
<tr>
<td style="text-align:center">参数聚合度</td>
<td style="text-align:center">高</td>
<td style="text-align:center">较高</td>
<td style="text-align:center">低</td>
</tr>
</tbody>
</table>
<h5 id="为什么选apollo">为什么选Apollo</h5>
<p>​		Apollo在当前几个配置中心选型中，在权限管控、格式校验、版本管理、图形化界面管理这三个方面比另外两个方案更具有明显优势，实时推送功能也支持的相对较好延迟在1s内，同时Apollo默认支持的服务发现组件为Eureka，比较契合我们当前的SpringCloud的分布式架构。</p>
<h4 id="apollo">Apollo</h4>
<h5 id="简介">简介</h5>
<p>​		Apollo（阿波罗）是携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。</p>
<h5 id="基本概念">基本概念</h5>
<ul>
<li>application(应用)
<ul>
<li>实际使用配置的应用</li>
<li>都有一个唯一的身份标识appId</li>
</ul>
</li>
<li>environment(环境)
<ul>
<li>配置对应的环境</li>
</ul>
</li>
<li>cluster(集群)
<ul>
<li>一个应用下不同实例的分组</li>
<li>集群默认是通过读取机器上的配置指定的</li>
</ul>
</li>
<li>namespace(命名空间)
<ul>
<li>一个应用下不同的配置分组，可类比为文件，如：数据库配置文件、应用配置文件等</li>
<li>命名空间有公有和私有属性</li>
</ul>
</li>
</ul>
<h5 id="整体设计">整体设计</h5>
<h6 id="服务端">服务端</h6>
<ul>
<li>Config Service : 提供配置的读取、推送，服务对象是Apollo客户端
<ul>
<li>Meta Service : 封装Eureka的接口服务</li>
<li>Eureka : 服务注册发现组件</li>
</ul>
</li>
<li>Admin Service : 提供配置的修改、发布，服务对象是Apollo Portal(管理端)</li>
<li>Portal Service :  提供界面用户参数的管理服务，多个环境公用一个portal</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://github.com/HurryUpWb/hurryupwb.github.io/post-images/1585058108588.png" alt="apollo整体设计图" loading="lazy"></figure>
<h6 id="客户端">客户端</h6>
<ul>
<li>
<p>客户端和服务端保持长连接</p>
<ul>
<li>Http Long Polling ：Http的长连接，服务端阻塞保持60s，有服务端关心的配置更改，通知客户端更改的NameSpace，客户端拉取新的配置，没有更改则返回Http状态码304给客户端</li>
</ul>
</li>
<li>
<p>客户端定时主动拉取配置</p>
<ul>
<li>服务推送的一种容错机制，当推送失败时，客户端主动拉取</li>
<li>拉取频率默认5分钟一次，可通过在客户端修改<code>apollo.refreshInterval</code>参数来更改，单位为分钟</li>
</ul>
</li>
<li>
<p>客户端会将拉取到的配置存在内存中并缓存一份到本地</p>
<figure data-type="image" tabindex="2"><img src="https://github.com/HurryUpWb/hurryupwb.github.io/post-images/1585058196974.png" alt="" loading="lazy"></figure>
</li>
</ul>
<h5 id="部署使用">部署使用</h5>
<h6 id="服务端部署">服务端部署</h6>
<ol>
<li>
<p>创建<code>ApolloConfigDB</code>数据库</p>
</li>
<li>
<p>启动ConfigService和AdminService两个服务，用于配置的管理</p>
</li>
<li>
<p>创建<code>ApolloPortalDB</code>数据库</p>
</li>
<li>
<p>启动Portal Service服务 用于管理界面对用户进行管理</p>
</li>
<li>
<p>添加项目、部门、用户：</p>
<ul>
<li>添加用户：管理员工具 -&gt; 用户管理</li>
<li>创建部门：管理员工具 -&gt; 系统参数 -&gt; KEY:organizations (修改后覆盖)</li>
<li>创建项目：主页点击<code>创建项目</code> ，AppId必须唯一</li>
</ul>
</li>
<li>
<p>添加环境：</p>
<ul>
<li>
<p>默认支持的环境列表<code>LOCAL, DEV, FWS, FAT, UAT, LPT, PRO, TOOLS, UNKNOWN</code></p>
</li>
<li>
<p>添加环境操作：</p>
<ol>
<li>
<p>管理员工具 -&gt; 系统参数 -&gt;添加环境名称，系统参数KEY:  <code>apollo.portal.envs</code> (修改后覆盖)</p>
</li>
<li>
<p>portal Service的配置文件<code>apollo-env.properties</code>  添加环境</p>
<pre><code class="language-properties">dev.meta=http://192.168.10.55:8080
fat.meta=http://localhost:8080
</code></pre>
</li>
</ol>
</li>
</ul>
</li>
<li>
<p>添加配置：</p>
<ul>
<li>一个应用有一个默认的<code>application.properties</code></li>
<li>通过添加<code>Namespace</code>添加新的配置文件，目前支持的配置文件格式有:<code>properties,xml,json,yml,yaml,txt</code></li>
</ul>
</li>
</ol>
<h6 id="客户端调用">客户端调用</h6>
<ol>
<li>
<p>客户端配置</p>
<ol>
<li>
<p>引入apollo-client的依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt;
    &lt;artifactId&gt;apollo-client&lt;/artifactId&gt;
    &lt;version&gt;${version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>resource 目录下添加 <code>META-INF</code>目录</p>
</li>
<li>
<p>添加文件<code>app.properties</code>，文件内容<code>app.id=xxx</code>（在apollo中注册的项目的ID）</p>
</li>
<li>
<p>添加启动参数<code>-Denv=dev -Ddev_meta=http://192.168.10.131:9100/</code></p>
</li>
<li>
<p>启动类上添加注解<code>@EnableApolloConfig</code></p>
</li>
</ol>
</li>
<li>
<p>取参方式</p>
<ul>
<li>
<p>使用API取参</p>
<ol>
<li>
<p>取properties配置</p>
<pre><code class="language-java">Config config = ConfigService.getAppConfig(); 
String someKey = &quot;someKeyFromDefaultNamespace&quot;;
String someDefaultValue = &quot;someDefaultValueForTheKey&quot;;
String value = config.getProperty(someKey, someDefaultValue);
</code></pre>
</li>
<li>
<p>取yaml/yml配置</p>
<pre><code class="language-java">Config config = ConfigService.getConfig(&quot;application.yml&quot;);
String someKey = &quot;someKeyFromYmlNamespace&quot;;
String someDefaultValue = &quot;someDefaultValueForTheKey&quot;;
String value = config.getProperty(someKey, someDefaultValue);
</code></pre>
</li>
<li>
<p>取其他格式配置</p>
<pre><code class="language-java">String someNamespace = &quot;test&quot;;
ConfigFile configFile = ConfigService.getConfigFile(&quot;test&quot;, ConfigFileFormat.XML);
String content = configFile.getContent();
</code></pre>
</li>
</ol>
</li>
<li>
<p>Spring Placeholder方式取参</p>
<ol>
<li>该方式要实现动态刷新必须添加两个注解<code>@Configuration</code> 和 <code>@EnableApolloConfig</code></li>
<li><strong>非properties的配置不支持 Palceholder取参</strong></li>
</ol>
</li>
</ul>
</li>
<li>
<p>本地缓存路径</p>
<ol>
<li>
<p>通过Java System Property</p>
<ul>
<li>
<p>可以通过Java的System Property <code>apollo.cacheDir</code>来指定</p>
</li>
<li>
<p>在Java程序启动脚本中，可以指定</p>
<pre><code class="language-properties">-Dapollo.cacheDir=/opt/data/some-cache-dir
</code></pre>
</li>
<li>
<p>如果是运行jar文件，格式是<code>java -Dapollo.cacheDir=/opt/data/some-cache-dir -jar xxx.jar</code></p>
</li>
<li>
<p>也可以通过程序指定，如<code>System.setProperty(&quot;apollo.cacheDir&quot;, &quot;/opt/data/some-cache-dir&quot;);</code></p>
</li>
</ul>
</li>
<li>
<p>通过Spring Boot的配置文件</p>
<ul>
<li>可以在Spring Boot的<code>application.properties</code>或<code>bootstrap.properties</code>中指定<code>apollo.cacheDir=/opt/data/some-cache-dir</code></li>
</ul>
</li>
<li>
<p>通过操作系统的System Environment <code>APOLLO_CACHEDIR</code></p>
<ul>
<li>可以通过操作系统的System Environment <code>APOLLO_CACHEDIR</code>来指定</li>
<li>注意key为全大写，且中间是<code>_</code>分隔</li>
</ul>
</li>
<li>
<p>通过<code>server.properties</code>配置文件</p>
<ul>
<li>可以在<code>server.properties</code>配置文件中指定<code>apollo.cacheDir=/opt/data/some-cache-dir</code></li>
<li>对于Mac/Linux，文件位置为<code>/opt/settings/server.properties</code></li>
<li>对于Windows，文件位置为<code>C:\opt\settings\server.properties</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="推广和使用">推广和使用</h4>
<h5 id="apollo环境部署">Apollo环境部署</h5>
<ul>
<li>各环境需部署的服务
<ul>
<li>DEV
<ul>
<li>configService</li>
<li>adminService</li>
<li>portalService</li>
</ul>
</li>
<li>FAT
<ul>
<li>configService</li>
<li>adminService</li>
</ul>
</li>
<li>PRO
<ul>
<li>configService</li>
<li>adminService</li>
</ul>
</li>
</ul>
</li>
<li>部署portalService带来的问题
<ul>
<li>PRO环境和DEV、FAT不在同一内网，需要暴露端口8080用于注册</li>
</ul>
</li>
</ul>
<h5 id="目前配置分类">目前配置分类</h5>
<ul>
<li>公共配置
<ul>
<li>Redis配置</li>
<li>Eureka配置</li>
</ul>
</li>
<li>项目私有配置
<ul>
<li>端口配置</li>
<li>数据库连接</li>
<li>mybatis的Mapper映射配置</li>
<li>mybatis日志配置</li>
<li>RocketMQ的Topic相关配置（可考虑提到公共配置里）</li>
</ul>
</li>
</ul>
<h5 id="试点和使用">试点和使用</h5>
<ol>
<li>在h3-warehouse项目上试点使用</li>
<li>创建项目</li>
<li>创建组织架构关系</li>
<li>创建用户</li>
<li>设置用户权限</li>
<li>各环境同步配置</li>
</ol>
<h4 id="相关文档">相关文档</h4>
<h5 id="使用">使用</h5>
<ul>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">Apollo使用指南</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">Java客户端使用指南</a></li>
<li><a href="%5Bhttps://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#124-%E5%8F%AF%E9%80%89%E8%AE%BE%E7%BD%AE%5D(https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#124-%E5%8F%AF%E9%80%89%E8%AE%BE%E7%BD%AE)">环境参数设置方式</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0">Apollo开放平台接入指南</a></li>
<li><a href="https://github.com/ctripcorp/apollo-use-cases">Apollo使用场景和示例代码</a></li>
<li><a href="%5Bhttps://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#314-%E8%8E%B7%E5%8F%96%E9%9D%9Eproperties%E6%A0%BC%E5%BC%8Fnamespace%E7%9A%84%E9%85%8D%E7%BD%AE%5D(https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#314-%E8%8E%B7%E5%8F%96%E9%9D%9Eproperties%E6%A0%BC%E5%BC%8Fnamespace%E7%9A%84%E9%85%8D%E7%BD%AE)">获取非properties格式namespace的配置</a></li>
<li><a href="https://github.com/ctripcorp/apollo/issues/980">补全环境时问题</a></li>
</ul>
<h5 id="设计">设计</h5>
<ul>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E8%AE%BE%E8%AE%A1">Apollo配置中心设计</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B9%8B%E2%80%9CNamespace%E2%80%9D">Apollo核心概念之“Namespace”</a></li>
<li><a href="https://mp.weixin.qq.com/s/-hUaQPzfsl9Lm3IqQW3VDQ">Apollo配置中心架构剖析</a></li>
<li><a href="http://www.iocoder.cn/categories/Apollo/">Apollo源码解析</a></li>
</ul>
<h5 id="开发">开发</h5>
<ul>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97">Apollo开发指南</a></li>
<li><a href="https://www.toyaml.com/index.html">properties和yml互转工具</a></li>
<li><a href="https://github.com/ctripcorp/apollo/blob/master/apollo-buildtools/style/eclipse-java-google-style.xml">Eclipse Code Style</a></li>
<li><a href="https://github.com/ctripcorp/apollo/blob/master/apollo-buildtools/style/intellij-java-google-style.xml">Intellij Code Style</a></li>
</ul>
<h5 id="部署">部署</h5>
<ul>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Quick-Start">Quick Start</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">分布式部署指南</a></li>
</ul>
<h5 id="版本历史">版本历史</h5>
<ul>
<li><a href="https://github.com/ctripcorp/apollo/releases">版本发布历史</a></li>
</ul>
<h5 id="faq">FAQ</h5>
<ul>
<li><a href="https://github.com/ctripcorp/apollo/wiki/FAQ">常见问题回答</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/%E9%83%A8%E7%BD%B2&amp;%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">部署&amp;开发遇到的常见问题</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[eureka注册调用的两种方式]]></title>
        <id>https://github.com/HurryUpWb/hurryupwb.github.io/post/eureka-zhu-ce-diao-yong-de-liang-chong-fang-shi/</id>
        <link href="https://github.com/HurryUpWb/hurryupwb.github.io/post/eureka-zhu-ce-diao-yong-de-liang-chong-fang-shi/">
        </link>
        <updated>2020-03-24T13:39:05.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>情景：servie_1通过eureka调用service_2</p>
</li>
<li>
<p>方式：使用两种方式，一种是Fegin方式，另一种是用RestTemplate方式</p>
<ul>
<li>Fegin方式
<ul>
<li>RestTemplate方式</li>
</ul>
</li>
</ul>
</li>
<li>
<p>问题：这两种方式都不能调用到service_2</p>
</li>
<li>
<p>解决方法：通过检查各种配置以及eureka调用的方式，发现微服务注册到eureka中有两种方式</p>
<ul>
<li>1，使用主机的hostname注册到eureka里，后续调用就通过hostname
<ul>
<li>2，使用主机IP注册到eureka，后续调用就是使用IP</li>
</ul>
</li>
</ul>
<blockquote>
<p>eureka.instance.preferIpAddress =true</p>
</blockquote>
<p>使用第一种注册方式时，始终无法访问获取到服务，报错HTTP 400，通过几个小时的尝试和发掘，当使用第二种方式时可以<br>
直接调用到服务，至于第一种方式，使用hostname的方式是eureka默认的服务调用方式，为什么不能调用呢，这里面有个坑，<br>
部署微服务的主机名被设置成了带 ‘_’ 下划线，这是不符合规范的，所以调用时就会报错，修改hosname就可以了</p>
</li>
<li>
<p>总结</p>
<ul>
<li>eureka调用和发现服务有两种方式，hostname和IP 方式
<ul>
<li>hostname 不能带 “_”
<ul>
<li>使用hostname相互调用微服务时，必须修改hosts文件，否则会有 unknowHost报错</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot resttemplate使用]]></title>
        <id>https://github.com/HurryUpWb/hurryupwb.github.io/post/springboot-resttemplate-shi-yong/</id>
        <link href="https://github.com/HurryUpWb/hurryupwb.github.io/post/springboot-resttemplate-shi-yong/">
        </link>
        <updated>2020-03-24T13:38:37.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>情景：<br>
使用restTemplate进行微服务之间的调用</p>
</li>
<li>
<p>方式</p>
<ul>
<li>
<p>启动类或者配置中添加RestTemplate注入</p>
</li>
<li>
<blockquote>
<p>@Bean<br>
private RestTemplate seRestTemplate(){<br>
return new RestTemplate();<br>
}</p>
</blockquote>
<ul>
<li>
<p>在哪里使用就@Autowired</p>
</li>
<li>
<p>调用服务的代码</p>
</li>
<li>
<blockquote>
<p>restTemplate.postForObject(requestUrl+loginUrl,json,HashMap.class);</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>问题</p>
<ul>
<li>
<p>报错信息</p>
</li>
<li>
<blockquote>
<p>I/O error on POST request for &quot;http://h3-orgmanager/userlogin/v1.0/private/login&quot;: h3-orgmanager; nested exception is       java.net.UnknownHostException: h3-orgmanager</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>解决方法</p>
<ul>
<li>给注入RestTemplate的地方添加一个注解 @LoadBalanced</li>
</ul>
</li>
<li>
<p>总结</p>
<ul>
<li>此时问题能够解决，但由此引申出的问题有很多<br>
1，为什么要添加 @LoadBalanced 才能使用<br>
2，微服务之间相互调用两种方式，一种使用 hostname 一种是使用IP，不加@LoadBalanced这种方式在使用IP的情况是否可行</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[for循环里操作集合对象]]></title>
        <id>https://github.com/HurryUpWb/hurryupwb.github.io/post/for-xun-huan-li-cao-zuo-ji-he-dui-xiang/</id>
        <link href="https://github.com/HurryUpWb/hurryupwb.github.io/post/for-xun-huan-li-cao-zuo-ji-he-dui-xiang/">
        </link>
        <updated>2020-03-24T13:37:51.000Z</updated>
        <content type="html"><![CDATA[<p>最近遇到关于集合遍历的问题，遍历的时候删除集合中的元素抛出异常 ConcurrentModificationException，所以回顾下这些基础知识：</p>
<ul>
<li>疑问
<ul>
<li>map 和 List 的remove 方法都是如何删除元素的？</li>
<li>各有几种遍历方式，有何异同？</li>
</ul>
</li>
<li>map 和 List 的remove 方法都是如何删除元素的？</li>
</ul>
<ol>
<li>Map的remove()方法：<br>
Map的删除元素的操作JDK只提供了一个方式，map.remove(Object key)，参数必须是map的Key</li>
</ol>
<pre><code class="language-java">public V remove(Object key) {
    Entry&lt;K,V&gt; e = removeEntryForKey(key);
    return (e == null ? null : e.value);
}
</code></pre>
<ol start="2">
<li>List 的remove()方法：<br>
List的remove()方法则是有两种，是重载的方式实现的
<ul>
<li>remove(int index)：按照下标删除元素，此方法只会做数组越界检查</li>
<li>remove（Object obj）：按照对象删除元素，这里会做运行时修改检查</li>
</ul>
</li>
</ol>
<p>各有几种遍历方式，有何异同？</p>
<ol>
<li>Map的遍历方式有常见的4种</li>
</ol>
<pre><code class="language-java">for(Object obj:map1.values()){}

for(String s:map1.keySet()){}

for(Entry&lt;String, Object&gt; e:map1.entrySet()){}

Iterator&lt;Entry&lt;String, Object&gt;&gt; it = map1.entrySet().iterator();
while(it.hasNext()){}
 
</code></pre>
<p>这四种方式都是实现了迭代器的。</p>
<p>List的遍历方式</p>
<pre><code>for(int i=0;i&lt;blist.size();i++){}
	
for(String s:blist){}
	
Iterator&lt;String&gt; ilt = blist.iterator();

while(ilt.hasNext()){}
</code></pre>
<p>​	<br>
​	remove(int index)时会调用越界检查方法：<br>
​	private void rangeCheck(int index) {<br>
​	    if (index &gt;= size)<br>
​		throw new                      IndexOutOfBoundsException(outOfBoundsMsg(index));<br>
​	}<br>
​</p>
<pre><code>  remove（Object ojb）方法会调用是否修改检查：
		  final void checkForComodification() {
			if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
			}
</code></pre>
<p>查看源码我们发现，其实remove方法本身是没有这个checkForComdification检查的，</p>
<pre><code class="language-java">public boolean remove(Object o) {
    if (o == null) {
        for (int index = 0; index &lt; size; index++)
            if (elementData[index] == null) {
                fastRemove(index);
                return true;
            }
    } else {
        for (int index = 0; index &lt; size; index++)
            if (o.equals(elementData[index])) {
                fastRemove(index);
                return true;
            }
    }
    return false;
}
</code></pre>
<p>这个方法是ArrayList的内部实现类的方法，因此只有使用迭代器遍历List 的时候删除或新增元素时就会抛出此异常，然后我们还发现，迭代器里面也有remove方法</p>
<pre><code class="language-java"> public void remove() {
            if (lastRet &lt; 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.remove(lastRet);
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
       }
</code></pre>
<p>此方法直接调用remove（index）方法，故不会抛出运行是修改异常。</p>
<p>结论：<br>
Map无论如何都不可以遍历时删除元素<br>
List可以在遍历的时候使用下标删除元素或者使用迭代器的remove删除元素。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ nginx转发header带下划线（'_'）的自动过滤问题nginx]]></title>
        <id>https://github.com/HurryUpWb/hurryupwb.github.io/post/nginx-zhuan-fa-header-dai-xia-hua-xian-_de-zi-dong-guo-lu-wen-ti-nginx/</id>
        <link href="https://github.com/HurryUpWb/hurryupwb.github.io/post/nginx-zhuan-fa-header-dai-xia-hua-xian-_de-zi-dong-guo-lu-wen-ti-nginx/">
        </link>
        <updated>2020-03-24T13:25:54.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>情景：在header设置参数，后端接收用于逻辑判断</li>
<li>方式：前端静态资源部署在tomcat下，后端通过nginx转发进入网关，网关内获取header</li>
<li>问题：某个一header无论如何都获取不到，起初怀疑长度超过header最大长度80K，后发现并不是</li>
<li>解决方法：对比发现这个header使用了一个下划线 ，更换之后即可，最后发现是nginx配置导致下划线header无法被转发</li>
<li>总结：可以配置nginx中http部分 增加underscores_in_headers on; 的配置，即可转发</li>
</ul>
]]></content>
    </entry>
</feed>